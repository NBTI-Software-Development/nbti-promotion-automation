version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: nbti-database
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nbti_promotion_db}
      POSTGRES_USER: ${POSTGRES_USER:-nbti_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_this}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - nbti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nbti_user} -d ${POSTGRES_DB:-nbti_promotion_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: nbti-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_this}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nbti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend/nbti_api
      dockerfile: Dockerfile
      target: production
    container_name: nbti-backend
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-nbti_user}:${POSTGRES_PASSWORD:-secure_password_change_this}@database:5432/${POSTGRES_DB:-nbti_promotion_db}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key-change-this}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_this}@redis:6379/0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECURITY_HEADERS_ENABLED=true
    volumes:
      - app_logs:/var/log/nbti-api
      - app_uploads:/var/uploads/nbti
    ports:
      - "5000:5000"
    networks:
      - nbti-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend/nbti-frontend
      dockerfile: Dockerfile
      target: production
    container_name: nbti-frontend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:5000/api}
      - VITE_APP_NAME=${VITE_APP_NAME:-NBTI Promotion Automation}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nbti-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: nbti-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - nbti-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  nbti-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

